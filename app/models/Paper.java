package models;

import play.db.*; // play.db.DB
import java.sql.*;
import java.util.*;

/* Paper class is the data structure used to shown in list.scala.html
 * 
 */
public class Paper {
	public String id, title,pubvenue, year, ncites, abst, authors, selfCites; // abst : abstract
	
    /*
	 * Connection: A connection (session) with a specific database. 
	               SQL statements are executed and results are returned within the context of a connection. 
	 * ResultSet : A table of data representing a database result set, 
	               which is usually generated by executing a statement that queries the database. 
	 * Statement : The object used for executing a static SQL statement and returning the results it produces.
	 */
	 
	/* execute SQL statement and return the context(ResultSet) of the connection */
	private static ResultSet execute(Connection connection, String query) {
		ResultSet result = null;
		Statement statement = null;
		try {
			/* Creates a Statement object for sending SQL statements to the database,
			 * and then executes the given SQL statement, which returns a single ResultSet object.
			 */
			statement = connection.createStatement();  
			result = statement.executeQuery(query); 
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}
	/* List the papers with a specified cluster id; 
	 * Each unique paper has only one cluster id. 
	 * Sometimes a cluster id could map to one more papers, 
	 * that is because each paper may have duplicates.  
	 */
	public static List<Paper> findByCluster(List<String> list) {
		List<Paper> ret = new ArrayList<Paper>();
		try {
			Connection connection = DB.getConnection();
			for (String c : list) {
				String query = "Select id,title,venue,year,ncites,abstract,selfCites from papers where cluster=" + c + " limit 1;";
				ResultSet rs = execute(connection, query);
				getPaperInformation(rs, ret, connection);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally{
			connection.close();
		}
		return ret;
	}
	/* List the papers with a specified paper id; 
	 * Note that certain papers may be identical even they have different Paper ID respectively.  
	 */
	public static List<Paper> findByPaperid(String paperid) {
		// this list contains only one element!!
		List<Paper> ret = new ArrayList<Paper>();
		try {
			//Returns a connection from the default datasource, with auto-commit enabled.
			Connection connection = DB.getConnection(); 
			String q_paper = "Select id,title,venue,year,ncites,abstract,selfCites from papers where id='"+ paperid + "';";
			ResultSet rs = execute(connection, q_paper);
			getPaperInformation(rs, ret, connection);
		} catch (SQLException e) {
			e.printStackTrace();
		}finally{
			connection.close();
		}
		return ret;
	}
	
	public static void getPaperInformation(ResultSet rs, List<Paper> ret, Connection connection){
		while (rs.next()) {
			Paper p = new Paper(); // create a new instance of Paper
			// initialize this Paper instance
			p.id = rs.getString("id");
			p.title = rs.getString("title");
			p.pubvenue = rs.getString("venue");
			p.year = rs.getString("year");
			p.ncites = rs.getString("ncites");
			p.abst = rs.getString("abstract");
			p.selfCites = rs.getString("selfCites");
			String authors = "";
			StringBuilder authors = new StringBuilder();
			query = "Select name from authors where paperid='" + p.id + "'";
			ResultSet auth = execute(connection, query);
			while (auth.next()) {
				authors.append(auth.getString("name"));
				authors.append(",");
			}
			p.authors = authors.toString();
			// aftering initializing all information about the paper, add this instance to result list
			ret.add(p);
		}
	}
	
	
}
